h2. float(!side)

|_.Param|_.Default value|_.Description|_.Values|
|!side|n/a|The side to float the element|"right" or "left"|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | None | 1.1 | n/a |

Floats the element to the designated side. Also applies @display:inline@ to the element to fix the IE6 double-margin bug.

Code:
<pre><code>=float(!side)
{
	float:!side;
	display:inline;
}
</code></pre>

h2. quick-clearfix

|_.Param|_.Default value|_.Description|_.Values|
|n/a||||

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | has-layout | 1.1 | n/a |

Clears an element of its floated children. The quick way.

Code:
<pre><code>=quick-clearfix
{
	+has-layout; /* For IE6, the overflow is enough for IE7+ */
	overflow:hidden;
}
</code></pre>

h2. clearfix

|_.Param|_.Default value|_.Description|_.Values|
|n/a||||

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | has-layout | 1.1 | n/a |

Clears an element of its floated children.

Code:
<pre><code>=clearfix
{
	+has-layout;

	&:after 
	{
		content:'\\0020';
		display:block;
		height:0;
		clear:both;
		visibility:hidden;
		overflow:hidden;
		font-size:0;
	}
}
</code></pre>

h2. inline-block

|_.Param|_.Default value|_.Description|_.Values|
|n/a||||

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Workaround to make the element behave as inline-block

Code:
<pre><code>=inline-block
{
	zoom:1; 
	display:inline; 
	display:-moz-inline-box; 
	display:inline-block; 
	vertical-align:top;
}
</code></pre>

h2. has-layout

|_.Param|_.Default value|_.Description|_.Values|
|n/a||||

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Gives the element has-layout in IE. By switching to inline-block it will make the element haslayout, then we just switch it back. Alternatives are: zoom:1; overflow:anything; (IE7+), float, position:absolute;

See http://www.satzansatz.de/cssd/onhavinglayout.html

Code:
<pre><code>=has-layout
{
  display:inline-block;

  &
  {
  	display:block;
  }
}
</code></pre>

h2. container(!container-width = !grid-width)

|_.Param|_.Default value|_.Description|_.Values|
|!container-width|!grid-width|Creates a container element for centering content. Default width is the total grid width defined in the @grid settings.|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | clearfix | 1.1 | n/a |

Makes an element behave as a container. Defaults to the total width of the grid. *Note: This mixin requires the @grid settings*

Code:
<pre><code>=container(!container-width = !grid-width)
{
	+clearfix;

	width:!container-width;
	margin:0 auto;
	position:relative;
}
</code></pre>

h2. showgrid(!x = 0, !y = 0)

|_.Param|_.Default value|_.Description|_.Values|
|!x|0|The x-offset of the background image|int|
|!y|0|The y-offset of the background image|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Shows the grid background image. *Note: This will not work in IE as it embeds the image data.* It uses the special !grid_image_data constant which outputs the base64 image data for the grid png file.

Code:
<pre><code>=showgrid(!x = 0, !y = 0)
{
	background: url(!grid_image_data) !x !y;
}
</code></pre>

h2. columns(!n , !side = false)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of columns|int|
|!side|false|If the column is first or last, removes some margins|"left" or "right"|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | float, clearfix | 1.1 | n/a |

Makes the element behave like a grid column. Requires the @grid settings.

Code:
<pre><code>=columns(!n , !side = false)
{
	+float(left);
	+clearfix;

	@if(!side == left)
	{
		margin-left:0;
		margin-right:!gutter-width;
	}

	@if(!side == right)
	{
		margin-right:0;
		margin-left:!gutter-width;
	}

	@if(!side == false)
	{
		margin-right,margin-left:!gutter-width;
	}

	position:relative;
	width:eval(!n * !column-width - (!gutter-width * 2))px;
}
</code></pre>

h2. append(!n)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of columns|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Appends columns to the grid unit in the form of padding-right

Code:
<pre><code>=append(!n)
{
	padding-right:eval(!column-width * !n)px;
}
</code></pre>

h2. prepend(!n)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of columns|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Prepends columns to the grid unit in the form of padding-left

Code:
<pre><code>=prepend(!n)
{
	padding-left:eval(!column-width * !n)px;
}
</code></pre>

h2. baseline(!n)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of baselines|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Adds n pixels of height to element according to the baseline.

Code:
<pre><code>=baseline(!n)
{
	height:eval(!baseline * !n)px;
}
</code></pre>

h2. pull(!n)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of columns|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Pulls the element to the left n number of columns

Code:
<pre><code>=pull(!n)
{
	+float(left);
	margin-right: eval(!column-width * !n + !grid-width)px;
	position:relative;
}
</code></pre>

h2. push(!n)

|_.Param|_.Default value|_.Description|_.Values|
|!n|-|The number of columns|int|

|_.Module |_.Extends|_.Added|_.Updated|
| Layout | n/a | 1.1 | n/a |

Pushes the element to the right n number of columns

Code:
<pre><code>=push(!n)
{
	+float(left);
	margin-left: eval(!column-width * !n + !grid-width)px;
	position:relative;
}
</code></pre>