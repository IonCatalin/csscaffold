/**
* Float
*
* Floats and element, while applying the IE
* fix to the float to prevent the double-margin bug
*
* @type Mixin
* @param !side The direction of the float
*/
=float(!side)
{
	float:!side;
	display:inline;
}

/**
* Quick Clearfix
*
* Clears an element of its floated children. The quick way.
*
* @type Mixin
*/
=quick-clearfix
{
	+has-layout; /* For IE6, the overflow is enough for IE7+ */
	overflow:hidden;
}

/**
* Clearfix
*
* Clears an element of its floated children.
*
* @type Mixin
*/
=clearfix
{
	+has-layout;
	
	&:after 
	{
		content:'\\0020';
		display:block;
		height:0;
		clear:both;
		visibility:hidden;
		overflow:hidden;
		font-size:0;
	}
}

/**
* Inline-block
*
* Workaround to make the element behave as inline-block
*
* @type Mixin
*/
=inline-block
{
	zoom:1; 
	display:inline; 
	display:-moz-inline-box; 
	display:inline-block; 
	vertical-align:top;
}

/**
* HasLayout
*
* Gives the element has-layout in IE. By switching to inline-block
* it will make the element haslayout, then we just switch it back.
* Alternatives are: zoom:1; overflow:anything; (IE7+), float, position:absolute;
*
* @see http://www.satzansatz.de/cssd/onhavinglayout.html
* @type Mixin
*/
=has-layout
{
  display:inline-block;
  
  &
  {
  	display:block;
  }
}


/**
* Container
*
* Makes an element behave as a container. Defaults
* to the total width of the grid.
*
* @type Mixin
* @param !container-width The width of the container
*/
=container(!container-width = !grid-width)
{
	+clearfix;
	
	width:!container-width;
	margin:0 auto;
	position:relative;
}

/**
* Show grid
*
* Shows the grid background image
*
* @type Mixin
* @param !offset The vertical offset of the grid image
*/
=showgrid(!x = 0, !y = 0)
{
	background: url(!grid_image_data) !x !y;
}

/**
* Columns
*
* Makes the element behave as a column.
*
* @type Mixin
* @param !number The number of columns
*/
=columns(!n, !side = false)
{
	+float(left);
	+clearfix;
	
	@if(!side == left)
	{
		margin-left:0;
		margin-right:!gutter-width;
	}
	
	@if(!side == right)
	{
		margin-right:0;
		margin-left:!gutter-width;
	}
	
	@if(!side == false)
	{
		margin-right,margin-left:!gutter-width;
	}
	
	position:relative;
	width:eval(!n * !column-width - (!gutter-width * 2))px;
}

/**
* Layout Utilities
*
* Various layout utilities for manipulating columns
*
* @type Mixin
*/

=append(!n)
{
	padding-right:eval(!column-width * !n)px;
}

=prepend(!n)
{
	padding-left:eval(!column-width * !n)px;
}

=baseline(!n)
{
	height:eval(!baseline * !n)px;
}

=pull(!n)
{
	+float(left);
	margin-right: eval(!column-width * !n + !grid-width)px;
	position:relative;
}

=push(!n)
{
	+float(left);
	margin-left: eval(!column-width * !n + !grid-width)px;
	position:relative;
}
