/**
* ========================================================
* Basic Layout Elements
*
* The grid settings for the entire site. This uses 
* a grid similar to that of BlueprintCSS.
*
* @section Grid
* @type Layout
* @where Global
* @since 1.0
* @see http://www.blueprintcss.org/
* --------------------------------------------------------
*/	
	
	/**
	* Scaffold automatically creates the container class
	* based on your grid settings
	* @see mixins/layout.css
	*/
	.container { +container; }
	
	/**
	* Mainly for debugging purposes
	*/
	.wireframe div { background:rgba(255,0,0,0.4); min-height:[!baseline*3]px; }
	.clear { clear:left; }
	.clearfix { +clearfix; }
	
	header  { columns:12; margin-bottom:!baseline; }
	footer  { columns:12; }
	
/**
* ========================================================
* Navigation
*
* The navigation styles for the entire site. These get
* the inline-list style from Scaffold to automatically
* make them function as a horizontal list. 
*
* @section Navigation
* @type Widget
* @where Global
* @since 1.0
* --------------------------------------------------------
*/
	
	nav
	{ 
		ul 		{ +horizontal-list; }
		li 		{ }
		li a 	{ }
	}
	
/**
* ========================================================
* HTML5 Elements
*
* So we can use the HTML5 elements as much as possible,
* we will create both the element and a class of the same
* name so we can use them today. 
*
* @section html5
* --------------------------------------------------------
*/

	article 	{}
	section 	{ margin-bottom:!baseline; }
	aside 		{}
	

/**
* ========================================================
* Layouts
*
* Each unique layout is prefixed with 'layout' so that it
* can be identified as a layout. This isn't a requirement. 
*
* @section Layouts
* @type Layout
* @where Global
* @since 1.0
* --------------------------------------------------------
*/
	
	.layout-3-column
	{
		#primary		 		{ +columns(4); padding:20px; }
		#secondary				{ +columns(4); border:2px solid #555; padding:18px; }
		#tertiary				{ +columns(4); }
	}


/**
* ========================================================
* Content Layout
*
* Based on Jason Santa Maria's Work on 24Ways. 
* These aren't entirely semantic. But you don't want to 
* fill up your CSS with id's for every figure.
*
* @section Content Layout
* @type Layout
* @where Content
* @since 1.0
* @see http://24ways.org/2008/making-modular-layout-systems
* --------------------------------------------------------
*/

	figure,
	.figure
	{ 
		margin:!baseline; 
		float:left;
		overflow:hidden;
		
		img 		{ float:left; margin-bottom:!baseline; }
	}
	
	.caption, .figure, figure { +small-type; line-height:20px; }
	
	.figure img { width:100%; }
	
	.figure p 
	{ 
		clear:left;
		padding:0 !important;
	}
	
	.right 
	{
		float:right !important; 
		margin-right:0; 	
	}

	.left
	{ 
		float:left !important;  
		margin-left:0;
	}
	
	.frame { border: 1px solid #999; }
	.solo { margin:!baseline 0; }
	
	/* If the figure isn't sitting flush to the paragraph or sides use these */
	.top      { margin-top:0; }
	.bottom   { margin-bottom:0;}
	.first	  { margin-left:0 !important; }
	.last 	  { margin-right:0 !important; }
